#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

MIDDLEWARE_DIR="/usr/local/Hashkitty/Middleware/"
CONFIG_DIR="/etc/Hashkitty/Middleware/"
SERVICE_FILE="/etc/systemd/system/Hashkitty-middleware.service"
SERVICE_NAME="Hashkitty-middleware.service"

error_exit() {
    printf "Error: %s\n" "$1" >&2
    exit 1
}

install_middleware() {
    if [[ $EUID -ne 0 ]]; then
        error_exit "This script must be run as root."
    fi

    echo "Installing middleware..."

    script_dir=$(dirname "$(readlink -f "$0")")
    cd "$script_dir" || error_exit "Failed to change directory!"
 
    read -rp "Please enter the API URL:"  api_url

    read -rp "Please enter a name for this Middleware: " mid_name

    read -rp "Please enter a description for this Middleware: " mid_description

    uuid=$(uuidgen)
    echo "Generated UUID: $uuid"
    echo "Making POST request to API..."

    json_data="{\"name\":\"$mid_name\",\"description\":\"$mid_description\",\"uuid\":\"$uuid\"}"
    response=$(curl -X POST -H "Content-Type: application/json" -d "$json_data" "$api_url:3000/api/middleware")
    if [[ $? -ne 0 ]]; then
        error_exit "Failed to make POST request to API."
    fi
    echo "POST request successful."
    echo "Go to your Admin dashboard and accept this Middleware with the UUID above."

    read -rp "Enter the password generated by the Admin dashboard: " mid_password

    echo "Adding middleware configuration to config.json..."
    config_file="$CONFIG_DIR/config.json"
    if [[ ! -f "$config_file" ]]; then
        mkdir -p "$(dirname "$config_file")"
        touch "$config_file" || error_exit "Failed to create config file: $config_file"
    fi
    echo "{
    \"name\": \"$mid_name\",
    \"description\": \"$mid_description\",
    \"uuid\": \"$uuid\",
    \"password\": \"$mid_password\",
    \"api_url\": \"$api_url\"
    }" > "$config_file"
    echo "Middleware configuration added to config.json."

    echo "Copying middleware service file to $SERVICE_FILE..."
    if ! cp ./dist/Hashkitty-middleware.service "$SERVICE_FILE"; then
        error_exit "Failed to copy middleware service file!"
    fi

    echo "Copying middleware binary to $MIDDLEWARE_DIR..."
    mkdir -p "$MIDDLEWARE_DIR"
    if ! cp ./dist/Middleware "$MIDDLEWARE_DIR"; then
        error_exit "Failed to copy middleware binary!"
    fi
    echo "Middleware binary copied to $MIDDLEWARE_DIR."

    if ! systemctl enable "$SERVICE_NAME"; then
        error_exit "Failed to enable Middleware service!"
    fi

    if ! systemctl start "$SERVICE_NAME"; then
        error_exit "Failed to start Middleware service!"
    fi

    printf "Middleware installed successfully!\n"
}   

uninstall_middleware(){
    if [[ $EUID -ne 0 ]]; then
        error_exit "This script must be run as root."
    fi

    printf "Uninstalling middleware...\n"

    # Stop the service if it is running
    if systemctl is-active --quiet "$SERVICE_NAME"; then
        if ! systemctl stop "$SERVICE_NAME"; then
            error_exit "Failed to stop middleware service!"
        fi
        echo "Middleware service stopped."
    else
        echo "Middleware service is not running."
    fi

    # Disable the service if it is enabled
    if systemctl is-enabled --quiet "$SERVICE_NAME"; then
        if ! systemctl disable "$SERVICE_NAME"; then
            error_exit "Failed to disable middleware service!"
        fi
        echo "Middleware service disabled."
    else
        echo "Middleware service is not enabled."
    fi

    # Remove the service file
    if [[ -f "$SERVICE_FILE" ]]; then
        if ! rm -f "$SERVICE_FILE"; then
            error_exit "Failed to remove middleware service file!"
        fi
        echo "Middleware service file removed."
    else
        echo "Middleware service file not found."
    fi

    # Remove the middleware binary directory
    if [[ -d "$MIDDLEWARE_DIR" ]]; then
        if ! rm -rf "$MIDDLEWARE_DIR"; then
            error_exit "Failed to remove middleware directory!"
        fi
        echo "Middleware directory removed."
    else
        echo "Middleware directory not found."
    fi

    # Remove the configuration directory
    if [[ -d "$CONFIG_DIR" ]]; then
        if ! rm -rf "$CONFIG_DIR"; then
            error_exit "Failed to remove middleware configuration directory!"
        fi
        echo "Middleware configuration directory removed."
    else
        echo "Middleware configuration directory not found."
    fi

    printf "Middleware uninstalled successfully!\n"
}


main() {
    local action="${1:-install}"
    case "$action" in
        -u)
            uninstall_middleware
            ;;
        install)
            install_middleware
            ;;
        *)
            printf "Usage: %s [-u (uninstall)]\n" "$(basename "$0")"
            exit 1
            ;;
    esac
}

main "$@"